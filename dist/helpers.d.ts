import { mastodon } from "masto";
import { CountKey, StringNumberDict } from "./types";
export declare const AUDIO = "audio";
export declare const IMAGE = "image";
export declare const IMAGE_EXTENSIONS: string[];
export declare const VIDEO = "video";
export declare const VIDEO_TYPES: ("audio" | "video" | "image" | "unknown" | "gifv")[];
export declare const VIDEO_EXTENSIONS: string[];
export declare const MEDIA_TYPES: string[];
export declare const DEFAULT_FONT_SIZE = 15;
export declare const extractDomain: (url: string) => string;
export declare function replaceHttpsLinks(input: string): string;
export declare function htmlToText(html: string): string;
export declare function average(values: number[]): number;
export declare function isImage(uri: string | null | undefined): boolean;
export declare function isVideo(uri: string | null | undefined): boolean;
export declare function groupBy<T>(array: T[], makeKey: (item: T) => string): Record<string, T[]>;
export declare function transformKeys<T>(data: T, transform: (key: string) => string): T;
export declare function incrementCount(counts: StringNumberDict, key?: CountKey | null, increment?: number): StringNumberDict;
export declare function countValues<T>(items: T[], getKey?: (item: T) => string | null | undefined, countNulls?: boolean): StringNumberDict;
export declare function zipArrays<T>(array1: string[], array2: T[]): Record<string, T>;
export declare function zipPromises<T>(args: string[], promiser: (s: string) => Promise<T>): Promise<Record<string, T>>;
export declare function sortKeysByValue(dict: StringNumberDict): string[];
export declare function atLeastValues(obj: StringNumberDict, minValue: number): StringNumberDict;
export declare function replaceEmojiShortcodesWithImageTags(html: string, emojis: mastodon.v1.CustomEmoji[], fontSize?: number): string;
export declare function createRandomString(length: number): string;

import { StorageKey, WeightInfoDict } from "./types";
export declare const SECONDS_IN_MINUTE = 60;
export declare const MINUTES_IN_HOUR = 60;
export declare const SECONDS_IN_HOUR: number;
export declare const SECONDS_IN_DAY: number;
export declare const SECONDS_IN_WEEK: number;
export declare const MIN_RECORDS_FOR_FEATURE_SCORING = 320;
export declare const MAX_ENDPOINT_RECORDS_TO_PULL = 5000;
type ApiRequestDefaults = {
    initialMaxRecords?: number;
    limit?: number;
    numMinutesUntilStale?: number;
    supportsMinMaxId?: boolean;
};
export type ConfigType = {
    country: string;
    defaultLanguage: string;
    language: string;
    locale: string;
    excessiveTags: number;
    hashtagTootRetrievalDelaySeconds: number;
    homeTimelineBatchSize: number;
    incrementalLoadDelayMS: number;
    lookbackForUpdatesMinutes: number;
    maxCachedTimelineToots: number;
    maxTimelineDaysToFetch: number;
    scoringBatchSize: number;
    timelineDecayExponent: number;
    numParticipatedTagsToFetchTootsFor: number;
    numParticipatedTagToots: number;
    numParticipatedTagTootsPerTag: number;
    apiDefaults: {
        [key in StorageKey]?: ApiRequestDefaults;
    };
    backgroundLoadIntervalSeconds: number;
    batchCompleteTootsSize: number;
    batchCompleteTootsSleepBetweenMS: number;
    defaultRecordsPerPage: number;
    maxConcurrentRequestsBackground: number;
    maxConcurrentRequestsInitial: number;
    maxRecordsForFeatureScoring: number;
    mutexWarnSeconds: number;
    staleDataDefaultMinutes: number;
    staleDataTrendingMinutes: number;
    timeoutMS: number;
    tootsCompleteAfterMinutes: number;
    minServerMAU: number;
    numServersToCheck: number;
    excessiveTagsPenalty: number;
    invalidTrendingTags: string[];
    minTrendingTagTootsForPenalty: number;
    numTootsPerTrendingTag: number;
    numDaysToCountTrendingTagData: number;
    numTrendingLinksPerServer: number;
    numTrendingTags: number;
    numTrendingTagsPerServer: number;
    numTrendingTagsToots: number;
    numTrendingTootsPerServer: number;
    defaultServers: string[];
    foreignLanguageServers: Record<string, string[]>;
    noMauServers: string[];
    noTrendingLinksServers: string[];
    isAppFilterVisible: boolean;
    weightsConfig: WeightInfoDict;
};
export declare const Config: ConfigType;
export declare function setLocale(locale?: string): void;
export {};

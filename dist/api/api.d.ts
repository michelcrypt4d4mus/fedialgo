import { mastodon } from "masto";
import { Mutex } from 'async-mutex';
import Account from "./objects/account";
import Toot from './objects/toot';
import { MastodonServersInfo, StorageKey, TimelineData, UserData, WeightName } from "../types";
export declare const INSTANCE = "instance";
export declare const LINKS = "links";
export declare const STATUSES = "statuses";
export declare const TAGS = "tags";
export type ApiMutex = Record<StorageKey | WeightName, Mutex>;
export declare class MastoApi {
    #private;
    api: mastodon.rest.Client;
    user: Account;
    homeDomain: string;
    mutexes: ApiMutex;
    userData?: UserData;
    static init(api: mastodon.rest.Client, user: Account): void;
    static get instance(): MastoApi;
    private constructor();
    getTimelineToots(numTimelineToots?: number, maxId?: string): Promise<TimelineData>;
    getUserData(): Promise<UserData>;
    fetchHomeFeed(numToots?: number, maxId?: string | number): Promise<Toot[]>;
    searchForToots(searchQuery: string, limit?: number, logMsg?: string): Promise<Toot[]>;
    getUserRecentToots(): Promise<Toot[]>;
    fetchFollowedAccounts(): Promise<Account[]>;
    getFollowedTags(): Promise<mastodon.v1.Tag[]>;
    getRecentNotifications(): Promise<mastodon.v1.Notification[]>;
    fetchRecentFavourites(): Promise<Toot[]>;
    fetchBlockedAccounts(): Promise<Account[]>;
    fetchMutedAccounts(): Promise<Account[]>;
    getServerSideFilters(): Promise<mastodon.v2.Filter[]>;
    getMastodonServersInfo(): Promise<MastodonServersInfo>;
    getTopServerDomains(): Promise<string[]>;
    resolveToot(toot: Toot): Promise<Toot>;
    private fetchData;
    private throwIfAccessTokenRevoked;
    static buildParams(maxId?: number | string, limit?: number): mastodon.DefaultPaginationParams;
    static v1Url: (path: string) => string;
    static v2Url: (path: string) => string;
    static trendUrl: (path: string) => string;
}

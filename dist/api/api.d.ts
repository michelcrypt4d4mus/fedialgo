import { mastodon } from "masto";
import { Mutex } from 'async-mutex';
import Account from "./objects/account";
import Toot from './objects/toot';
import { StorageKey, UserData, WeightName } from "../types";
export declare const INSTANCE = "instance";
export declare const LINKS = "links";
export declare const STATUSES = "statuses";
export declare const TAGS = "tags";
export type ApiMutex = Record<StorageKey | WeightName, Mutex>;
export declare class MastoApi {
    #private;
    api: mastodon.rest.Client;
    user: Account;
    homeDomain: string;
    mutexes: ApiMutex;
    userData?: UserData;
    static init(api: mastodon.rest.Client, user: Account): void;
    static get instance(): MastoApi;
    private constructor();
    fetchHomeFeed(numToots?: number, maxId?: string | number): Promise<Toot[]>;
    getBlockedAccounts(): Promise<Account[]>;
    getRecentTootsForTrendingTags(): Promise<Toot[]>;
    getFollowedAccounts(): Promise<Account[]>;
    getFollowedTags(): Promise<mastodon.v1.Tag[]>;
    getMutedAccounts(): Promise<Account[]>;
    getRecentFavourites(): Promise<Toot[]>;
    getRecentNotifications(): Promise<mastodon.v1.Notification[]>;
    getServerSideFilters(): Promise<mastodon.v2.Filter[]>;
    getUserData(): Promise<UserData>;
    getUserRecentToots(): Promise<Toot[]>;
    resolveToot(toot: Toot): Promise<Toot>;
    searchForToots(searchString: string, maxRecords?: number, logMsg?: string): Promise<Toot[]>;
    private buildParams;
    private fetchData;
    private getTootsForTag;
    private throwIfAccessTokenRevoked;
}

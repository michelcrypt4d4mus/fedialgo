import { mastodon } from "masto";
import { Mutex } from 'async-mutex';
import Account from "./objects/account";
import Toot from './objects/toot';
import UserData from "./user_data";
import { MastodonTag, StorageKey, WeightName } from "../types";
export declare const INSTANCE = "instance";
export declare const LINKS = "links";
export declare const STATUSES = "statuses";
export declare const TAGS = "tags";
export type ApiMutex = Record<StorageKey | WeightName, Mutex>;
export declare class MastoApi {
    #private;
    api: mastodon.rest.Client;
    user: Account;
    homeDomain: string;
    userData?: UserData;
    private mutexes;
    private requestSemphore;
    private timelineLookBackMS;
    static init(api: mastodon.rest.Client, user: Account): void;
    static get instance(): MastoApi;
    private constructor();
    fetchHomeFeed(numToots?: number, maxId?: string | number): Promise<Toot[]>;
    getBlockedAccounts(): Promise<Account[]>;
    getFollowedAccounts(): Promise<Account[]>;
    getFollowedTags(): Promise<mastodon.v1.Tag[]>;
    getMutedAccounts(): Promise<Account[]>;
    getParticipatedHashtagToots(): Promise<Toot[]>;
    getRecentFavourites(moar?: boolean): Promise<Toot[]>;
    getRecentNotifications(moar?: boolean): Promise<mastodon.v1.Notification[]>;
    getRecentTootsForTrendingTags(): Promise<Toot[]>;
    getServerSideFilters(): Promise<mastodon.v2.Filter[]>;
    getTootsForHashtag(searchStr: string, maxRecords?: number): Promise<mastodon.v1.Status[]>;
    getUserData(): Promise<UserData>;
    getUserRecentToots(moar?: boolean): Promise<Toot[]>;
    resolveToot(toot: Toot): Promise<Toot>;
    searchForToots(searchStr: string, maxRecords?: number): Promise<mastodon.v1.Status[]>;
    tagURL(tag: MastodonTag): string;
    private buildParams;
    private getCacheableToots;
    private getApiRecords;
    private getStatusesForTag;
    private getStatusesForTags;
    private throwIfAccessTokenRevoked;
    private endpointURL;
}

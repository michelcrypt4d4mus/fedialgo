import { mastodon } from "masto";
import Account from "./account";
import Scorer from "../../scorer/scorer";
import { FeedFilterSettings, MastodonTag, MediaCategory, StatusList, TootLike, TootScore, TrendingLink, TrendingTag } from "../../types";
export interface SerializableToot extends mastodon.v1.Status {
    followedTags?: MastodonTag[];
    isFollowed?: boolean;
    reblog?: SerializableToot | null;
    reblogsBy?: mastodon.v1.Account[];
    resolvedToot?: Toot;
    scoreInfo?: TootScore;
    sources?: string[];
    trendingLinks?: TrendingLink[];
    trendingRank?: number;
    trendingTags?: TrendingTag[];
    audioAttachments?: mastodon.v1.MediaAttachment[];
    imageAttachments?: mastodon.v1.MediaAttachment[];
    videoAttachments?: mastodon.v1.MediaAttachment[];
}
interface TootObj extends SerializableToot {
    ageInHours: () => number;
    containsString: (str: string) => boolean;
    describe: () => string;
    homeserverURL: () => Promise<string>;
    isDM: () => boolean;
    popularity: () => number;
    realAccount: () => Account;
    realToot: () => Toot;
    realURI: () => string;
    resolve: () => Promise<Toot>;
    tootedAt: () => Date;
}
export default class Toot implements TootObj {
    id: string;
    uri: string;
    application: mastodon.v1.Application;
    account: Account;
    content: string;
    createdAt: string;
    editedAt: string | null;
    emojis: mastodon.v1.CustomEmoji[];
    favouritesCount: number;
    mediaAttachments: mastodon.v1.MediaAttachment[];
    mentions: mastodon.v1.StatusMention[];
    reblogsCount: number;
    repliesCount: number;
    sensitive: boolean;
    spoilerText: string;
    tags: mastodon.v1.Tag[];
    visibility: mastodon.v1.StatusVisibility;
    bookmarked?: boolean | null;
    card?: mastodon.v1.PreviewCard | null;
    favourited?: boolean | null;
    filtered?: mastodon.v1.FilterResult[];
    language?: string | null;
    inReplyToId?: string | null;
    inReplyToAccountId?: string | null;
    muted?: boolean | null;
    pinned?: boolean | null;
    poll?: mastodon.v1.Poll | null;
    reblog?: Toot | null;
    reblogged?: boolean | null;
    text?: string | null;
    url?: string | null;
    followedTags?: mastodon.v1.Tag[];
    isFollowed?: boolean;
    reblogsBy: Account[];
    resolvedToot?: Toot;
    scoreInfo?: TootScore;
    sources?: string[];
    trendingRank?: number;
    trendingLinks?: TrendingLink[];
    trendingTags?: TrendingTag[];
    audioAttachments: mastodon.v1.MediaAttachment[];
    imageAttachments: mastodon.v1.MediaAttachment[];
    videoAttachments: mastodon.v1.MediaAttachment[];
    static build(toot: SerializableToot): Toot;
    ageInHours(): number;
    attachmentType(): MediaCategory | undefined;
    containsString(str: string): boolean;
    containsTagsMsg(): string | undefined;
    containsUserMention(): boolean;
    contentShortened(maxChars?: number): string;
    contentWithEmojis(fontSize?: number): string;
    describe(): string;
    homeserverURL(): Promise<string>;
    isDM(): boolean;
    isInTimeline(filters: FeedFilterSettings): boolean;
    isTrending(): boolean;
    isValidForFeed(): boolean;
    popularity(): number;
    realAccount(): Account;
    realToot(): Toot;
    realURI(): string;
    realURL(): string;
    resolve(): Promise<Toot>;
    serialize(): SerializableToot;
    alternateScoreInfo(): ReturnType<typeof Scorer.alternateScoreInfo>;
    tootedAt(): Date;
    private attachmentsOfType;
    private containsTagsOfTypeMsg;
    private isUsersOwnToot;
    private repair;
    private setDependentProperties;
    static buildToots(statuses: TootLike[], source: string, // Where did these toots come from?
    logPrefix?: string): Promise<Toot[]>;
    static dedupeToots(toots: Toot[], logLabel?: string): Toot[];
    static findMinIdForMaxIdParam(toots: Toot[]): string | null;
}
export declare const tootedAt: (toot: TootLike) => Date;
export declare const earliestToot: (toots: StatusList) => TootLike | null;
export declare const mostRecentToot: (toots: StatusList) => TootLike | null;
export declare const sortByCreatedAt: (toots: StatusList) => StatusList;
export declare const earliestTootedAt: (toots: StatusList) => Date | null;
export declare const mostRecentTootedAt: (toots: StatusList) => Date | null;
export declare const earliestTootedAtStr: (toots: StatusList) => string | null;
export declare const mostRecentTootedAtStr: (toots: StatusList) => string | null;
export {};

import { mastodon } from "masto";
import Account from "./account";
import { Logger } from '../../helpers/logger';
import { MediaCategory, ScoreName } from '../../enums';
import { type AccountLike, type FeedFilterSettings, type MastodonTag, type StatusList, type TagWithUsageCounts, type TootLike, type TootScore, type TrendingLink, type WeightedScore } from "../../types";
export declare const JUST_MUTING = "justMuting";
export declare const UNKNOWN = "unknown";
export interface SerializableToot extends mastodon.v1.Status {
    completedAt?: string;
    followedTags?: MastodonTag[];
    numTimesShown?: number;
    participatedTags?: TagWithUsageCounts[];
    reblog?: SerializableToot | null;
    reblogsBy?: AccountLike[];
    resolvedID?: string;
    scoreInfo?: TootScore;
    sources?: string[];
    trendingLinks?: TrendingLink[];
    trendingRank?: number;
    trendingTags?: TagWithUsageCounts[];
    audioAttachments?: mastodon.v1.MediaAttachment[];
    imageAttachments?: mastodon.v1.MediaAttachment[];
    videoAttachments?: mastodon.v1.MediaAttachment[];
}
interface TootObj extends SerializableToot {
    accounts: () => Account[];
    ageInHours: () => number;
    author: () => Account;
    attachmentType: () => MediaCategory | undefined;
    containsString: (str: string) => boolean;
    containsTag: (tag: TagWithUsageCounts, fullScan?: boolean) => boolean;
    containsTagsMsg: () => string | undefined;
    contentNonTagsParagraphs: (fontSize?: number) => string;
    contentParagraphs: (fontSize?: number) => string[];
    contentShortened: (maxChars?: number) => string;
    contentTagsParagraph: () => string | undefined;
    contentWithEmojis: (fontSize?: number) => string;
    describe: () => string;
    getScore: () => number;
    homeserverURL: () => Promise<string>;
    isDM: () => boolean;
    isFollowed: () => boolean;
    isInTimeline: (filters: FeedFilterSettings) => boolean;
    isPrivate: () => boolean;
    isTrending: () => boolean;
    isValidForFeed: (serverSideFilters: mastodon.v2.Filter[]) => boolean;
    popularity: () => number;
    realToot: () => Toot;
    realURI: () => string;
    resolve: () => Promise<Toot>;
    resolveID: () => Promise<string>;
    tootedAt: () => Date;
    withRetoot: () => Toot[];
}
export default class Toot implements TootObj {
    id: string;
    uri: string;
    application: mastodon.v1.Application;
    account: Account;
    content: string;
    createdAt: string;
    editedAt: string | null;
    emojis: mastodon.v1.CustomEmoji[];
    favouritesCount: number;
    mediaAttachments: mastodon.v1.MediaAttachment[];
    mentions: mastodon.v1.StatusMention[];
    reblogsCount: number;
    repliesCount: number;
    sensitive: boolean;
    spoilerText: string;
    tags: TagWithUsageCounts[];
    visibility: mastodon.v1.StatusVisibility;
    bookmarked?: boolean | null;
    card?: mastodon.v1.PreviewCard | null;
    favourited?: boolean | null;
    filtered?: mastodon.v1.FilterResult[];
    language?: string | null;
    inReplyToAccountId?: string | null;
    inReplyToId?: string | null;
    muted?: boolean | null;
    pinned?: boolean | null;
    poll?: mastodon.v1.Poll | null;
    reblog?: Toot | null;
    reblogged?: boolean | null;
    text?: string | null;
    url?: string | null;
    numTimesShown: number;
    completedAt?: string;
    followedTags?: mastodon.v1.Tag[];
    participatedTags?: TagWithUsageCounts[];
    reblogsBy: Account[];
    resolvedID?: string;
    scoreInfo?: TootScore;
    sources?: string[];
    trendingLinks?: TrendingLink[];
    trendingRank?: number;
    trendingTags?: TagWithUsageCounts[];
    audioAttachments: mastodon.v1.MediaAttachment[];
    imageAttachments: mastodon.v1.MediaAttachment[];
    videoAttachments: mastodon.v1.MediaAttachment[];
    private contentCache;
    static build(toot: SerializableToot): Toot;
    accounts(): Account[];
    ageInHours(): number;
    attachmentType(): MediaCategory | undefined;
    author(): Account;
    containsString(str: string): boolean;
    containsTag(tag: TagWithUsageCounts, fullScan?: boolean): boolean;
    containsTagsMsg(): string | undefined;
    containsUserMention(): boolean;
    contentNonTagsParagraphs(fontSize?: number): string;
    contentParagraphs(fontSize?: number): string[];
    contentShortened(maxChars?: number): string;
    contentTagsParagraph(): string | undefined;
    contentWithEmojis(fontSize?: number): string;
    describe(): string;
    getConversation(): Promise<Toot[]>;
    getIndividualScore(scoreType: keyof WeightedScore, name: ScoreName): number;
    getScore(): number;
    homeserverURL(): Promise<string>;
    isDM(): boolean;
    isFollowed(): boolean;
    isInTimeline(filters: FeedFilterSettings): boolean;
    isPrivate(): boolean;
    isTrending(): boolean;
    isValidForFeed(serverSideFilters: mastodon.v2.Filter[]): boolean;
    popularity(): number;
    realToot(): Toot;
    realURI(): string;
    realURL(): string;
    replyMentions(): string[];
    resolve(): Promise<Toot>;
    resolveID(): Promise<string>;
    tootedAt(): Date;
    withRetoot(): Toot[];
    private addEmojiHtmlTags;
    private attachmentsOfType;
    private completeProperties;
    private containsTagsOfTypeMsg;
    private contentString;
    private contentStripped;
    private contentWithCard;
    private determineLanguage;
    private isComplete;
    private isUsersOwnToot;
    private repair;
    static buildToots(statuses: TootLike[], source: string, skipSort?: boolean): Promise<Toot[]>;
    static completeToots(toots: TootLike[], logger: Logger, source?: string): Promise<Toot[]>;
    static dedupeToots(toots: Toot[], inLogger?: Logger): Toot[];
    static removeInvalidToots(toots: Toot[], logger: Logger): Promise<Toot[]>;
    static removeUsersOwnToots(toots: Toot[], logger: Logger): Toot[];
    static onlyRetoots(toots: Toot[]): Toot[];
    static onlyReplies(toots: Toot[]): Toot[];
    private static uniqFlatMap;
}
export declare const tootedAt: (toot: TootLike) => Date;
export declare const earliestToot: (toots: StatusList) => TootLike | null;
export declare const mostRecentToot: (toots: StatusList) => TootLike | null;
export declare function sortByCreatedAt<T extends StatusList>(toots: T): T;
export declare const earliestTootedAt: (toots: StatusList) => Date | null;
export declare const mostRecentTootedAt: (toots: StatusList) => Date | null;
export {};

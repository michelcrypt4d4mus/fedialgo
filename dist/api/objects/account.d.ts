import { mastodon } from "masto";
import { InstanceResponse } from '../mastodon_server';
import { type AccountLike, type AccountNames, type StringNumberDict } from "../../types";
type AccountCount = Record<string, {
    account: Account;
    count: number;
    isFollowed?: boolean;
}>;
interface AccountObj extends mastodon.v1.Account {
    describe?: () => string;
    displayNameFullHTML?: () => string;
    displayNameWithEmojis?: () => string;
    homeInstanceInfo?: () => Promise<InstanceResponse>;
    homeserver?: () => string;
    homserverURL?: () => string;
    isFollowed?: boolean;
    noteWithAccountInfo?: () => string;
    webfingerURI: string;
}
export default class Account implements AccountObj {
    id: string;
    username: string;
    acct: string;
    bot: boolean;
    createdAt: string;
    discoverable: boolean;
    displayName: string;
    followersCount: number;
    followingCount: number;
    group: boolean;
    lastStatusAt: string;
    locked: boolean;
    note: string;
    statusesCount: number;
    url: string;
    emojis: mastodon.v1.CustomEmoji[];
    fields: mastodon.v1.AccountField[];
    avatar: string;
    avatarStatic: string;
    header: string;
    headerStatic: string;
    noindex?: boolean;
    moved?: Account | null;
    suspended?: boolean | null;
    limited?: boolean | null;
    roles: mastodon.v1.Account["roles"];
    isFollowed: boolean;
    webfingerURI: string;
    static build(account: AccountLike): Account;
    describe(): string;
    displayNameFullHTML(): string;
    displayNameWithEmojis(fontSize?: number): string;
    homeInstanceInfo(): Promise<InstanceResponse>;
    homeserver(): string;
    homserverURL(): string;
    noteWithAccountInfo(): string;
    private buildWebfingerURI;
    static buildAccountNames(accounts: Account[]): AccountNames;
    static countAccounts(accounts: Account[]): StringNumberDict;
    static countAccountsWithObj(accounts: Account[]): AccountCount;
    static logSuspendedAccounts(accounts: Account[], logPrefix?: string): void;
}
export {};

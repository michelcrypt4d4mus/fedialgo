import { mastodon } from "masto";
import { Mutex } from 'async-mutex';
import ChaosFeatureScorer from "./scorer/feature/chaosFeatureScorer";
import DiversityFeedScorer from "./scorer/feed/diversity_feed_scorer";
import FavsFeatureScorer from "./scorer/feature/favsFeatureScorer";
import FollowedTagsFeatureScorer from "./scorer/feature/followed_tags_feature_scorer";
import getHomeFeed from "./feeds/homeFeed";
import ImageAttachmentScorer from "./scorer/feature/ImageAttachmentScorer";
import InteractionsFeatureScorer from "./scorer/feature/InteractionsFeatureScorer";
import NumFavoritesScorer from "./scorer/feature/numFavoritesScorer";
import NumRepliesScorer from "./scorer/feature/numRepliesScorer";
import NumRetootsScorer from "./scorer/feature/num_retoots_scorer";
import Paginator from "./api/paginator";
import RetootedUsersFeatureScorer from "./scorer/feature/reblogsFeatureScorer";
import RetootsInFeedScorer from "./scorer/feed/retoots_in_feed_scorer";
import RepliedFeatureScorer from "./scorer/feature/replied_feature_scorer";
import TrendingTootFeatureScorer from "./scorer/feature/trending_toots_feature_scorer";
import TrendingTagsFeatureScorer from "./scorer/feature/trending_tags_scorer";
import VideoAttachmentScorer from "./scorer/feature/VideoAttachmentScorer";
import { AccountNames, AlgorithmArgs, FeedFilterSettings, ScorerDict, StringNumberDict, Toot } from "./types";
declare const TIME_DECAY = "TimeDecay";
declare class TheAlgorithm {
    api: mastodon.rest.Client;
    user: mastodon.v1.Account;
    filters: FeedFilterSettings;
    feed: Toot[];
    followedAccounts: AccountNames;
    feedLanguageCounts: StringNumberDict;
    appCounts: StringNumberDict;
    tagCounts: StringNumberDict;
    tagFilterCounts: StringNumberDict;
    scoreMutex: Mutex;
    reloadIfOlderThanMS: number;
    setFeedInApp: (f: Toot[]) => void;
    fetchers: (typeof getHomeFeed)[];
    featureScorers: (ChaosFeatureScorer | FavsFeatureScorer | FollowedTagsFeatureScorer | ImageAttachmentScorer | InteractionsFeatureScorer | NumFavoritesScorer | NumRepliesScorer | NumRetootsScorer | RetootedUsersFeatureScorer | RepliedFeatureScorer | TrendingTootFeatureScorer | TrendingTagsFeatureScorer | VideoAttachmentScorer)[];
    feedScorers: (DiversityFeedScorer | RetootsInFeedScorer)[];
    weightedScorers: (ChaosFeatureScorer | DiversityFeedScorer | FavsFeatureScorer | FollowedTagsFeatureScorer | ImageAttachmentScorer | InteractionsFeatureScorer | NumFavoritesScorer | NumRepliesScorer | NumRetootsScorer | RetootedUsersFeatureScorer | RetootsInFeedScorer | RepliedFeatureScorer | TrendingTootFeatureScorer | TrendingTagsFeatureScorer | VideoAttachmentScorer)[];
    scorersDict: ScorerDict;
    static create(params: AlgorithmArgs): Promise<TheAlgorithm>;
    private constructor();
    getFeed(): Promise<Toot[]>;
    updateUserWeights(userWeights: StringNumberDict): Promise<Toot[]>;
    updateFilters(newFilters: FeedFilterSettings): Promise<Toot[]>;
    getUserWeights(): Promise<StringNumberDict>;
    filteredFeed(): Toot[];
    mostRecentTootAt(): Date;
    logFeedInfo(prefix?: string): void;
    learnWeights(tootScores: StringNumberDict, step?: number): Promise<StringNumberDict | undefined>;
    repairFeedAndExtractSummaryInfo(): void;
    list(): Paginator;
    private setDefaultWeights;
    private scoreFeed;
    private decorateWithScoreInfo;
    private isFiltered;
    private isValidForFeed;
    private shouldReloadFeed;
}
export { TIME_DECAY, FeedFilterSettings, StringNumberDict, TheAlgorithm, Toot, };

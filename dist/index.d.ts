import 'reflect-metadata';
import { mastodon } from "masto";
import Account from './api/objects/account';
import AlreadyShownScorer from './scorer/feature/already_shown_scorer';
import BooleanFilter, { BooleanFilterName, TypeFilterName } from "./filters/boolean_filter";
import ChaosScorer from "./scorer/feature/chaos_scorer";
import DiversityFeedScorer from "./scorer/feed/diversity_feed_scorer";
import FavouritedTagsScorer from './scorer/feature/favourited_tags_scorer';
import FollowedAccountsScorer from './scorer/feature/followed_accounts_scorer';
import FollowedTagsScorer from "./scorer/feature/followed_tags_scorer";
import HashtagParticipationScorer from "./scorer/feature/hashtag_participation_scorer";
import ImageAttachmentScorer from "./scorer/feature/image_attachment_scorer";
import InteractionsScorer from "./scorer/feature/interactions_scorer";
import { isAccessTokenRevokedError } from "./api/api";
import MentionsFollowedScorer from './scorer/feature/mentions_followed_scorer';
import MostFavouritedAccountsScorer from "./scorer/feature/most_favourited_accounts_scorer";
import MostRepliedAccountsScorer from "./scorer/feature/most_replied_accounts_scorer";
import MostRetootedAccountsScorer from "./scorer/feature/most_retooted_accounts_scorer";
import NumericFilter from './filters/numeric_filter';
import NumFavouritesScorer from "./scorer/feature/num_favourites_scorer";
import NumRepliesScorer from "./scorer/feature/num_replies_scorer";
import NumRetootsScorer from "./scorer/feature/num_retoots_scorer";
import RetootsInFeedScorer from "./scorer/feature/retoots_in_feed_scorer";
import Toot from './api/objects/toot';
import TrendingLinksScorer from './scorer/feature/trending_links_scorer';
import TrendingTagsScorer from "./scorer/feature/trending_tags_scorer";
import TrendingTootScorer from "./scorer/feature/trending_toots_scorer";
import UserData from "./api/user_data";
import VideoAttachmentScorer from "./scorer/feature/video_attachment_scorer";
import { timeString } from './helpers/time_helpers';
import { FEDIALGO, GIFV, VIDEO_TYPES, extractDomain } from './helpers/string_helpers';
import { isDebugMode } from './helpers/environment_helpers';
import { WeightPresetLabel, WeightPresets } from './scorer/weight_presets';
import { LANGUAGE_CODES } from './helpers/language_helper';
import { isValueInStringEnum, makeChunks, makePercentileChunks, sortKeysByValue } from "./helpers/collection_helpers";
import { FeedFilterSettings, KeysOfValueType, MastodonInstance, MastodonTag, MediaCategory, MinMaxAvgScore, NonScoreWeightName, ScoreName, ScoreStats, StringNumberDict, TagWithUsageCounts, TrendingData, TrendingLink, TrendingObj, TrendingWithHistory, WeightName, Weights, WeightInfoDict } from "./types";
declare const GET_FEED_BUSY_MSG = "called while load is still in progress. Consider using the setTimelineInApp() callback.";
declare const READY_TO_LOAD_MSG = "Ready to load";
interface AlgorithmArgs {
    api: mastodon.rest.Client;
    user: mastodon.v1.Account;
    locale?: string;
    setTimelineInApp?: (feed: Toot[]) => void;
}
declare class TheAlgorithm {
    static isDebugMode: boolean;
    filters: FeedFilterSettings;
    lastLoadTimeInSeconds: number | null;
    loadingStatus: string | null;
    trendingData: TrendingData;
    userData: UserData;
    weightPresets: WeightPresets;
    private api;
    private user;
    private setTimelineInApp;
    private feed;
    private homeFeed;
    private hasProvidedAnyTootsToClient;
    private loadStartedAt;
    private numTriggers;
    private totalNumTimesShown;
    private mergeMutex;
    private prepareScorersMutex;
    private cacheUpdater?;
    private dataPoller?;
    private featureScorers;
    private feedScorers;
    weightedScorers: (AlreadyShownScorer | ChaosScorer | DiversityFeedScorer | FavouritedTagsScorer | FollowedAccountsScorer | FollowedTagsScorer | HashtagParticipationScorer | ImageAttachmentScorer | InteractionsScorer | MentionsFollowedScorer | MostFavouritedAccountsScorer | MostRepliedAccountsScorer | MostRetootedAccountsScorer | NumFavouritesScorer | NumRepliesScorer | NumRetootsScorer | RetootsInFeedScorer | TrendingLinksScorer | TrendingTagsScorer | TrendingTootScorer | VideoAttachmentScorer)[];
    weightInfo: WeightInfoDict;
    static create(params: AlgorithmArgs): Promise<TheAlgorithm>;
    private constructor();
    triggerFeedUpdate(moreOldToots?: boolean): Promise<void>;
    triggerHomeTimelineBackFill(): Promise<void>;
    triggerPullAllUserData(): Promise<void>;
    getCurrentState(): Promise<Record<string, any>>;
    getRechartsStatsData(numPercentiles?: number): any[];
    getTimeline(): Toot[];
    getUserWeights(): Promise<Weights>;
    isLoading(): boolean;
    mostRecentHomeTootAt(): Date | null;
    mostRecentHomeTootAgeInSeconds(): number | null;
    refreshMutedAccounts(): Promise<void>;
    reset(complete?: boolean): Promise<void>;
    serverInfo(): Promise<mastodon.v2.Instance | mastodon.v1.Instance>;
    tagUrl(tag: string | MastodonTag): string;
    updateFilters(newFilters: FeedFilterSettings): Toot[];
    updateUserWeights(userWeights: Weights): Promise<Toot[]>;
    updateUserWeightsToPreset(presetName: WeightPresetLabel | string): Promise<Toot[]>;
    private checkIfLoading;
    private checkIfSkipping;
    private fetchAndMergeToots;
    private filterFeedAndSetInApp;
    private finishFeedUpdate;
    private getHomeTimeline;
    private launchBackgroundPoller;
    private loadCachedData;
    private lockedMergeToFeed;
    private logTelemetry;
    private mergeTootsToFeed;
    private prepareScorers;
    private recomputeScorers;
    private scoreAndFilterFeed;
    private setLoadingStateVariables;
    private statusDict;
    updateTootCache(): Promise<void>;
}
export default TheAlgorithm;
export { type FeedFilterSettings, type KeysOfValueType, type MastodonInstance, type MinMaxAvgScore, type ScoreStats, type StringNumberDict, type TagWithUsageCounts, type TrendingData, type TrendingLink, type TrendingObj, type TrendingWithHistory, type Weights, FEDIALGO, GET_FEED_BUSY_MSG, GIFV, LANGUAGE_CODES, READY_TO_LOAD_MSG, VIDEO_TYPES, Account, BooleanFilter, NumericFilter, Toot, BooleanFilterName, MediaCategory, NonScoreWeightName, ScoreName, TypeFilterName, WeightName, WeightPresetLabel, extractDomain, isAccessTokenRevokedError, isDebugMode, isValueInStringEnum, makeChunks, makePercentileChunks, // TODO: unused in demo app (for now)
sortKeysByValue, timeString, };

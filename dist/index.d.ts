import 'reflect-metadata';
import { mastodon } from "masto";
import Account from './api/objects/account';
import BooleanFilter, { BooleanFilterName, TypeFilterName } from "./filters/boolean_filter";
import ChaosScorer from "./scorer/feature/chaos_scorer";
import DiversityFeedScorer from "./scorer/feed/diversity_feed_scorer";
import FavouritedTagsScorer from './scorer/feature/favourited_tags_scorer';
import FollowedTagsScorer from "./scorer/feature/followed_tags_scorer";
import HashtagParticipationScorer from "./scorer/feature/hashtag_participation_scorer";
import ImageAttachmentScorer from "./scorer/feature/image_attachment_scorer";
import InteractionsScorer from "./scorer/feature/interactions_scorer";
import { isAccessTokenRevokedError } from "./api/api";
import MentionsFollowedScorer from './scorer/feature/mentions_followed_scorer';
import MostFavoritedAccountsScorer from "./scorer/feature/most_favorited_accounts_scorer";
import MostRepliedAccountsScorer from "./scorer/feature/most_replied_accounts_scorer";
import MostRetootedUsersScorer from "./scorer/feature/most_retooted_users_scorer";
import NumericFilter from "./filters/numeric_filter";
import NumFavoritesScorer from "./scorer/feature/num_favorites_scorer";
import NumRepliesScorer from "./scorer/feature/num_replies_scorer";
import NumRetootsScorer from "./scorer/feature/num_retoots_scorer";
import RetootsInFeedScorer from "./scorer/feature/retoots_in_feed_scorer";
import { formatScore } from "./scorer/scorer";
import Toot from './api/objects/toot';
import TrendingLinksScorer from './scorer/feature/trending_links_scorer';
import TrendingTagsScorer from "./scorer/feature/trending_tags_scorer";
import TrendingTootScorer from "./scorer/feature/trending_toots_scorer";
import UserData from "./api/user_data";
import VideoAttachmentScorer from "./scorer/feature/video_attachment_scorer";
import { timeString } from './helpers/time_helpers';
import { FEDIALGO, GIFV, VIDEO_TYPES, extractDomain } from './helpers/string_helpers';
import { sortKeysByValue } from "./helpers/collection_helpers";
import { isDebugMode } from './helpers/environment_helpers';
import { PresetWeightLabel, PresetWeights } from './scorer/weight_presets';
import { NON_SCORE_WEIGHTS, FeedFilterSettings, MastodonInstances, MediaCategory, ScorerDict, WeightInfo, StringNumberDict, TrendingLink, TrendingObj, TrendingStorage, TagWithUsageCounts, TrendingWithHistory, WeightName, Weights, MastodonTag } from "./types";
declare const GET_FEED_BUSY_MSG = "called while load is still in progress. Consider using the setTimelineInApp() callback.";
declare const READY_TO_LOAD_MSG = "Ready to load";
interface AlgorithmArgs {
    api: mastodon.rest.Client;
    user: mastodon.v1.Account;
    locale?: string;
    setTimelineInApp?: (feed: Toot[]) => void;
}
declare class TheAlgorithm {
    filters: FeedFilterSettings;
    isDebug: boolean;
    lastLoadTimeInSeconds: number | null;
    loadingStatus: string | null;
    mastodonServers: MastodonInstances;
    trendingData: TrendingStorage;
    userData: UserData;
    private api;
    private user;
    private setTimelineInApp;
    private feed;
    private homeFeed;
    private dataPoller?;
    private hasProvidedAnyTootsToClient;
    private loadStartedAt;
    private numTriggers;
    private mergeMutex;
    private scoreMutex;
    private featureScorers;
    private feedScorers;
    weightedScorers: (ChaosScorer | DiversityFeedScorer | FavouritedTagsScorer | FollowedTagsScorer | HashtagParticipationScorer | ImageAttachmentScorer | InteractionsScorer | MentionsFollowedScorer | MostFavoritedAccountsScorer | MostRepliedAccountsScorer | MostRetootedUsersScorer | NumFavoritesScorer | NumRepliesScorer | NumRetootsScorer | RetootsInFeedScorer | TrendingLinksScorer | TrendingTagsScorer | TrendingTootScorer | VideoAttachmentScorer)[];
    weightInfo: ScorerDict;
    static create(params: AlgorithmArgs): Promise<TheAlgorithm>;
    private constructor();
    triggerFeedUpdate(moreOldToots?: boolean): Promise<void>;
    triggerHomeTimelineBackFill(): Promise<void>;
    triggerPullAllUserData(): Promise<void>;
    getCurrentState(): Promise<Record<string, any>>;
    getTimeline(): Toot[];
    getUserWeights(): Promise<Weights>;
    isLoading(): boolean;
    logCurrentState(): Promise<void>;
    mostRecentHomeTootAt(): Date | null;
    mostRecentHomeTootAgeInSeconds(): number | null;
    reset(): Promise<void>;
    tagUrl(tag: string | MastodonTag): string;
    updateFilters(newFilters: FeedFilterSettings): Toot[];
    updateUserWeights(userWeights: Weights): Promise<Toot[]>;
    updateUserWeightsToPreset(presetName: PresetWeightLabel): Promise<Toot[]>;
    private checkIfLoading;
    private checkIfSkipping;
    private fetchAndMergeToots;
    private filterFeedAndSetInApp;
    private finishFeedUpdate;
    private getHomeTimeline;
    private launchBackgroundPoller;
    private loadCachedData;
    private lockedMergeToFeed;
    private logTelemetry;
    private mergeTootsToFeed;
    private prepareScorers;
    private recomputeScorers;
    private scoreAndFilterFeed;
    private setLoadingStateVariables;
    private statusDict;
}
export default TheAlgorithm;
export { FEDIALGO, GET_FEED_BUSY_MSG, GIFV, NON_SCORE_WEIGHTS, READY_TO_LOAD_MSG, VIDEO_TYPES, Account, BooleanFilter, BooleanFilterName, FeedFilterSettings, MediaCategory, NumericFilter, PresetWeightLabel, PresetWeights, StringNumberDict, Toot, TrendingLink, TrendingObj, TagWithUsageCounts, TrendingWithHistory, TypeFilterName, WeightInfo, WeightName, Weights, extractDomain, formatScore, isAccessTokenRevokedError, isDebugMode, timeString, sortKeysByValue, };

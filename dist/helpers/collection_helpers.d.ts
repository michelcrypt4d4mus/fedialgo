import { CountKey, MastodonID, StorageKey, StringNumberDict, Weights } from "../types";
export declare function average(values: number[]): number;
export declare function groupBy<T>(array: T[], makeKey: (item: T) => string): Record<string, T[]>;
export declare function transformKeys<T>(data: T, transform: (key: string) => string): T;
export declare function incrementCount(counts: StringNumberDict, key?: CountKey | null, increment?: number): StringNumberDict;
export declare function countValues<T>(items: T[], getKey?: (item: T) => string | null | undefined, countNulls?: boolean): StringNumberDict;
export declare function zipArrays<T>(array1: string[], array2: T[]): Record<string, T>;
export declare function zipPromises<T>(args: string[], promiser: (s: string) => Promise<T>): Promise<Record<string, T>>;
export declare function sortKeysByValue(dict: StringNumberDict): string[];
export declare function atLeastValues(obj: StringNumberDict, minValue: number): StringNumberDict;
export declare function sumValues(obj: StringNumberDict | Weights): number;
export declare function sumArray(arr: (number | null | undefined)[]): number;
export declare function shuffle<T>(array: T[]): T[];
export declare function uniquifyByProp<T>(array: T[], transform: (value: T) => string): T[];
export declare function batchPromises<T>(items: Array<T>, fn: (item: T) => Promise<any>, label?: string, batchSize?: number): Promise<any[]>;
export declare function keyByProperty<T>(array: T[], keyFxn: (value: T) => string): Record<string, T>;
export declare function filterWithLog<T>(array: T[], filterFxn: (value: T) => boolean, logPrefix: string, reason: string, // Describe why things were filtered
objType?: string): T[];
export declare function findMinId(array: MastodonID[]): string | undefined;
export declare function checkUniqueIDs(array: MastodonID[], label: StorageKey): void;
